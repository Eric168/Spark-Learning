<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.eric.self.dao.mapper.UserAuthorityMapper" >
  <resultMap id="BaseResultMap" type="mapper.UserAuthority" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="userId" property="userId" jdbcType="INTEGER" />
    <result column="roleId" property="roleId" jdbcType="INTEGER" />
    <result column="authority" property="authority" jdbcType="INTEGER" />
    <result column="key" property="key" jdbcType="VARCHAR" />
    <result column="isDelete" property="isDelete" jdbcType="INTEGER" />
    <result column="tenantId" property="tenantId" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, userId, roleId, authority, key, isDelete, tenantId
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="mapper.UserAuthorityExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from User_Authority
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from User_Authority
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from User_Authority
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="mapper.UserAuthority" >
    insert into User_Authority (id, userId, roleId, 
      authority, key, isDelete, 
      tenantId)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, 
      #{authority,jdbcType=INTEGER}, #{key,jdbcType=VARCHAR}, #{isDelete,jdbcType=INTEGER}, 
      #{tenantId,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="mapper.UserAuthority" >
    insert into User_Authority
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        userId,
      </if>
      <if test="roleId != null" >
        roleId,
      </if>
      <if test="authority != null" >
        authority,
      </if>
      <if test="key != null" >
        key,
      </if>
      <if test="isDelete != null" >
        isDelete,
      </if>
      <if test="tenantId != null" >
        tenantId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="authority != null" >
        #{authority,jdbcType=INTEGER},
      </if>
      <if test="key != null" >
        #{key,jdbcType=VARCHAR},
      </if>
      <if test="isDelete != null" >
        #{isDelete,jdbcType=INTEGER},
      </if>
      <if test="tenantId != null" >
        #{tenantId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByExampleSelective" parameterType="map" >
    update User_Authority
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        userId = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.roleId != null" >
        roleId = #{record.roleId,jdbcType=INTEGER},
      </if>
      <if test="record.authority != null" >
        authority = #{record.authority,jdbcType=INTEGER},
      </if>
      <if test="record.key != null" >
        key = #{record.key,jdbcType=VARCHAR},
      </if>
      <if test="record.isDelete != null" >
        isDelete = #{record.isDelete,jdbcType=INTEGER},
      </if>
      <if test="record.tenantId != null" >
        tenantId = #{record.tenantId,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update User_Authority
    set id = #{record.id,jdbcType=INTEGER},
      userId = #{record.userId,jdbcType=INTEGER},
      roleId = #{record.roleId,jdbcType=INTEGER},
      authority = #{record.authority,jdbcType=INTEGER},
      key = #{record.key,jdbcType=VARCHAR},
      isDelete = #{record.isDelete,jdbcType=INTEGER},
      tenantId = #{record.tenantId,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="mapper.UserAuthority" >
    update User_Authority
    <set >
      <if test="userId != null" >
        userId = #{userId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        roleId = #{roleId,jdbcType=INTEGER},
      </if>
      <if test="authority != null" >
        authority = #{authority,jdbcType=INTEGER},
      </if>
      <if test="key != null" >
        key = #{key,jdbcType=VARCHAR},
      </if>
      <if test="isDelete != null" >
        isDelete = #{isDelete,jdbcType=INTEGER},
      </if>
      <if test="tenantId != null" >
        tenantId = #{tenantId,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="mapper.UserAuthority" >
    update User_Authority
    set userId = #{userId,jdbcType=INTEGER},
      roleId = #{roleId,jdbcType=INTEGER},
      authority = #{authority,jdbcType=INTEGER},
      key = #{key,jdbcType=VARCHAR},
      isDelete = #{isDelete,jdbcType=INTEGER},
      tenantId = #{tenantId,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <insert id="batchInsert" parameterType="java.util.List">
  insert User_Authority(roleId,`key`,isDelete,tenantId)
  VALUES
   <foreach collection="list" separator="," item="item">
     ( #{item.roleId,jdbcType=INTEGER},
       #{item.key,jdbcType=VARCHAR},
       1,
      '1'
     )
   </foreach>
  </insert>
</mapper>